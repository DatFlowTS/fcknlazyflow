#!/bin/bash
#
# This script installs updates, dependent on the distro it is running from
#
LOGDIR=$HOME/.update/$(date +%F).log

if [[ ! -d "${LOGDIR}" ]]; then
    mkdir -p $LOGDIR
fi

as_root () {
    case $USER_ID in
        0)
            true
            ;;
        *)
            false
            ;;
    esac
}

update_neofetch () {
    LOG=$LOGDIR/neofetch
    echo '' >> $LOG
    echo '#################################' >> $LOG
    echo '#################################' >> $LOG
    echo $(date) >> $LOG
    echo '' >> $LOG
    which neofetch >/dev/null
    if [[ $? != 0 ]]; then
        echo "Running fresh install.." >> $LOG
        case $(as_root) in 
            true)
                NFP=/usr/local/bin/neofetch
                ;;
            *)
                NFP=$HOME/.local/bin/neofetch
                ;;
            esac
    else
        echo "Found existing neofetch. Upgrading..." >> $LOG 
        NFP=$(which neofetch)
        sudo rm -fv $NFP >> $LOG
    fi
    curl -s https://raw.githubusercontent.com/dylanaraps/neofetch/master/neofetch -o $NFP >> $LOG
    sudo chmod -v 555 $NFP >> $LOG
    echo "Done!"
    exit 0
}

update_yay () {
    LOG=$LOGDIR/yay
    echo '' >> $LOG
    echo '#################################' >> $LOG
    echo '#################################' >> $LOG
    echo $(date) >> $LOG
    echo '' >> $LOG
    which yay >/dev/null >> $LOG
    if [[ $? != 0 ]]; then
        sudo pacman -Sy --noconfirm yay >> $LOG
    else 
        sudo yay -Syyu --noconfirm >> $LOG
    fi
}

update_pacman () {
    LOG=$LOGDIR/pacman
    echo '' >> $LOG
    echo '#################################' >> $LOG
    echo '#################################' >> $LOG
    echo $(date) >> $LOG
    echo '' >> $LOG
    sudo pacman -Syyu --noconfirm >> $LOG
    sudo reboot
}

update_dnf () {
    LOG=$LOGDIR/dnf
    echo '' >> $LOG
    echo '#################################' >> $LOG
    echo '#################################' >> $LOG
    echo $(date) >> $LOG
    echo '' >> $LOG
    which dnf >/dev/null
    if [[ $? != 0 ]]; then
        sudo yum -y install dnf >> $LOG
    fi
    sudo dnf clean all
    sudo dnf -y upgrade --refresh >> $LOG
    sudo reboot
}

update_apt () {
    LOG=$LOGDIR/apt
    echo '' >> $LOG
    echo '#################################' >> $LOG
    echo '#################################' >> $LOG
    echo $(date) >> $LOG
    echo '' >> $LOG
    sudo apt -y update  >> $LOG
    sudo apt -y upgrade >> $LOG
    sudo reboot
}

update_brew () {
    LOG=$LOGDIR/brew
    echo '' >> $LOG
    echo '#################################' >> $LOG
    echo '#################################' >> $LOG
    echo $(date) >> $LOG
    echo '' >> $LOG
    which brew >/dev/null
    if [[ $? != 0 ]]; then
        xcode-select --install >> $LOG
        bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" >> $LOG
        echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> $HOME/.zshrc
        eval "$(/opt/homebrew/bin/brew shellenv)"
    else
        brew update >> $LOG
        brew upgrade >> $LOG
    fi
}

update_ga () {
    LOG=$LOGDIR/ga
    echo '' >> $LOG
    echo '#################################' >> $LOG
    echo '#################################' >> $LOG
    echo $(date) >> $LOG
    echo '' >> $LOG
    mkdir -v $HOME/inst >> $LOG
    update_brew
    brew install autoconf automake libtool libqrencode
    cd $HOME/inst
    git clone git@github.com:/google/google-authenticator-libpam >> $LOG
    cd google-authenticator-libpam
    ./bootstrap.sh >> $LOG
    ./configure >> $LOG
    make >> $LOG
    sudo make install >> $LOG
    cd -
    rm -rfv $HOME/inst >> $LOG
    SSH_CONFIG_FILE=/etc/ssh/sshd_config.d/100-macos.conf
    echo ""
    echo "PubkeyAuthentication yes" | sudo tee -a $SSH_CONFIG_FILE >> $LOG
    echo "ChallengeResponseAuthentication yes" | sudo tee -a $SSH_CONFIG_FILE >> $LOG
    echo "AuthenticationMethods publickey,password publickey,keyboard-interactive:pam" | sudo tee -a $SSH_CONFIG_FILE >> $LOG
    echo "auth required /usr/local/lib/security/pam_google_authenticator.so nullok" | sudo tee -a /etc/pam.d/sshd >> $LOG
}

update_macos () {
    LOG=$LOGDIR/OSX
    echo '' >> $LOG
    echo '#################################' >> $LOG
    echo '#################################' >> $LOG
    echo $(date) >> $LOG
    echo '' >> $LOG
    sudo softwareupdate -i --all --agree-to-license --force -R >> $LOG
}

get_distro () {
    if [ -f /etc/os-release ]; then
        # freedesktop.org and systemd
        . /etc/os-release
        export OS=$ID
    elif type lsb_release >/dev/null 2>&1; then
        # linuxbase.org
        export OS=$(lsb_release -si | grep -Eo '^[^ ]+' | tr '[:upper:]' '[:lower:]')
    elif [ -f /etc/lsb-release ]; then
        # For some versions of Debian/Ubuntu without lsb_release command
        . /etc/lsb-release
        export OS=$(echo $DISTRIB_ID | grep -Eo '^[^ ]+' | tr '[:upper:]' '[:lower:]')
    elif [ -f /etc/debian_version ]; then
        # Older Debian/Ubuntu/etc.
        export OS=debian
    elif [ -f /etc/redhat-release ]; then
        # Older Red Hat, CentOS, etc.
        export OS=$(cat /etc/redhat-release | grep -Eo '^[^ ]+' | tr '[:upper:]' '[:lower:]')
    else
        # Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
        export OS=$(uname -s | grep -Eo '^[^ ]+' | tr '[:upper:]' '[:lower:]')
    fi
}

update_self () {
    LOG=$LOGDIR/update_script_self
    echo '' >> $LOG
    echo '#################################' >> $LOG
    echo '#################################' >> $LOG
    echo $(date) >> $LOG
    echo '' >> $LOG
    echo "Updating update script.." >> $LOG
    sudo rm -fv ${LBIN}/update >> $LOG
    curl https://raw.githubusercontent.com/datflowts/fcknlazyflow/master/ez-misc/update | tee ${LBIN}/update >/dev/null
    chmod -v 555 ${LBIN}/update >> $LOG
    echo "Done!"
    exit 0
}

get_distro

if [[ $# -eq 0 ]] || [[ -z "$1" ]]; then
    case $OS in 
        fedora|centos|rhel|rocky|oracle)
            update_dnf
            ;;
        ubuntu|debian)
            update_apt
            ;;
        manjaro|arch)
            update_yay
            update_pacman
            ;;
        darwin)
            update_brew
            update_macos
            ;;
        *)
            echo "$OS not supported. Exiting..."
            exit 1
            ;;
    esac
else
    case $@ in
        neofetch)
            update_neofetch
            ;;
        ga|google-authenticator|gauth|google-auth)
            if [[ "$OS" != "darwin" ]]; then
                echo "This is designed for MacOS only."
                echo "For Linux, please use your package manager."
                echo "Exiting..."
                exit 1
            fi
            update_ga
            ;;
        yay)
            update_yay
            ;;
        brew|homebrew)
            which brew >> /dev/null
            if [[ "$OS" != "darwin" ]]; then
                echo "This is designed for MacOS only."
                echo "For Linux, please use your package manager"
                echo "or visit https://brew.sh for informations"
                echo "about how to install and maintain brew for your OS."
                echo "Exiting..."
                exit 1
            fi
            update_brew
            ;;
        self|update)
            update_self
            ;;
        *)
            echo "Unknown argument. Exiting..."
            exit 1
            ;;
    esac
fi
