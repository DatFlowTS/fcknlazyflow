#!/bin/bash
#
# This script installs updates, dependent on the distro it is running from
#
LOGDIR=$HOME/.update/$(date +%F).log

if [[ ! -d "${LOGDIR}" ]]; then
    mkdir -p "$LOGDIR"
fi

as_root () {
    case $USER_ID in
        0)
            true
        ;;
        *)
            false
        ;;
    esac
}

update_neofetch () {
    LOG="$LOGDIR/neofetch"
    touch "$LOG"
    {
        echo ''
        echo '#################################'
        echo '#################################'
        date
        echo ''
        which neofetch >/dev/null
        if [[ $? != 0 ]]; then
            echo "Running fresh install.."
            case $(as_root) in
                true)
                    NFP=/usr/local/bin/neofetch
                ;;
                *)
                    NFP=$HOME/.local/bin/neofetch
                ;;
            esac
        else
            echo "Found existing neofetch. Upgrading..."
            NFP=$(which neofetch)
            sudo rm -fv "$NFP"
        fi
        curl -s https://raw.githubusercontent.com/dylanaraps/neofetch/master/neofetch -o "$NFP"
        sudo chmod -v 555 "$NFP"
        echo "Done!"
    } >> "$LOG"
    exit 0
}

update_yay () {
    LOG="$LOGDIR/yay"
    touch "$LOG"
    {
        echo ''
        echo '#################################'
        echo '#################################'
        date
        echo ''
        which yay > /dev/null
        if [[ $? != 0 ]]; then
            sudo pacman -Sy --noconfirm yay
        else
            sudo yay -Syyu --noconfirm
        fi
    } >> "$LOG"
}

update_pacman () {
    LOG="$LOGDIR/pacman"
    touch "$LOG"
    {
        echo ''
        echo '#################################'
        echo '#################################'
        date
        echo ''
        sudo pacman -Syyu --noconfirm
    } >> "$LOG"
    sudo reboot
}

update_dnf () {
    LOG="$LOGDIR/dnf"
    touch "$LOG"
    {
        echo ''
        echo '#################################'
        echo '#################################'
        date
        echo ''
        which dnf >/dev/null
        if [[ $? != 0 ]]; then
            sudo yum -y install dnf
        fi
        sudo dnf clean all
        sudo dnf -y upgrade --refresh
    } >> "$LOG"
    sudo reboot
}

update_apt () {
    LOG="$LOGDIR/apt"
    touch "$LOG"
    {
        echo ''
        echo '#################################'
        echo '#################################'
        date
        echo ''
        sudo apt -y update
        sudo apt -y upgrade
        sudo apt autoremove
    } >> "$LOG"
    sudo reboot
}

update_brew () {
    LOG="$LOGDIR/brew"
    touch "$LOG"
    {
        echo ''
        echo '#################################'
        echo '#################################'
        date
        echo ''
        which brew >/dev/null
        if [[ $? != 0 ]]; then
            xcode-select --install
            bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            echo 'eval "$(/usr/local/bin/brew shellenv)"' >> $HOME/.zshrc
            eval "$(/usr/local/bin/brew shellenv)"
        else
            brew update
            brew upgrade
        fi
    } >> "$LOG"
}

update_ports () {
    LOG="$LOGDIR/ports"
    touch "$LOG"
    {
        echo ''
        echo '#################################'
        echo '#################################'
        date
        echo ''
        which wget > /dev/null
        if [[ $? != 0 ]]; then brew install wget; fi
        brew install wget
        which port > /dev/null
        if [[ $? != 0 ]]; then 
            mkdir ptmp
            cd ptmp || exit 1
            pkg_file=""   
            case "$(sw_vers -productVersion | sed 's/[.].*$//')" in
                14)
                    wget https://github.com/macports/macports-base/releases/download/v2.8.1/MacPorts-2.8.1-14-Sonoma.pkg
                    pkg_file=MacPorts-2.8.1-14-Sonoma.pkg
                ;;
                13)
                    wget https://github.com/macports/macports-base/releases/download/v2.8.1/MacPorts-2.8.1-13-Ventura.pkg
                    pkg_file=MacPorts-2.8.1-13-Ventura.pkg
                ;;
                12)
                    wget https://github.com/macports/macports-base/releases/download/v2.8.1/MacPorts-2.8.1-12-Monterey.pkg
                    pkg_file=MacPorts-2.8.1-12-Monterey.pkg
                ;;
                11)
                    wget https://github.com/macports/macports-base/releases/download/v2.8.1/MacPorts-2.8.1-11-BigSur.pkg
                    pkg_file=MacPorts-2.8.1-11-BigSur.pkg
                ;;
                *)    
                    echo "Your version of MacOS is not supported for this command, yet.
Please refer to https://ports.macports.org/port/pam-google-authenticator/ and try to install yourself."
                    exit 1    
                ;;
            esac
            sudo installer -pkg ./$pkg_file -target /
            cd .. || exit
            rm -rfv ptmp
            echo ''
            echo '#################################'
            echo "MacPorts installed. Make sure to add '/opt/local/bin' to your PATH"
            export PATH=/opt/local/bin:$PATH
        else 
            sudo port selfupdate
        fi
    } >> "$LOG"

update_ga () {
    LOG="$LOGDIR/ga"
    touch "$LOG"
    {
        echo ''
        echo '#################################'
        echo '#################################'
        date
        echo ''
        update_ports
        which google-authenticator > /dev/null
        if [[ $? != 0 ]]; then
            sudo port selfupdate
            sudo port install pam-google-authenticator
            SSH_CONFIG_FILE=/etc/ssh/sshd_config.d/69-staff.conf
            if [[ -f "$SSH_CONFIG_FILE" ]]; then sudo rm -fv "$SSH_CONFIG_FILE"; fi
            sudo touch "$SSH_CONFIG_FILE"
            sudo chmod -v 644 "$SSH_CONFIG_FILE"
            echo ""
            {
                echo "# This file get's generated every time you run the google-authenticator update.
# Please do not edit this file. Create another one instead.
Match group staff
    PubkeyAuthentication yes
    ChallengeResponseAuthentication yes
    KbdInteractiveAuthentication yes
    UsePAM yes
    AuthenticationMethods publickey,password publickey,keyboard-interactive:pam"
        } | sudo tee -a "$SSH_CONFIG_FILE"
            line_to_add="auth required /usr/local/lib/security/pam_google_authenticator.so nullok"
            file="/etc/pam.d/sshd"
            if sudo grep -qF "$line_to_add" "$file"; then
                sudo gsed -i "s#^.*pam_google_authenticator.so.*#$line_to_add#" "$file"
            else
                echo "$line_to_add" | sudo tee -a "$file"
            fi
        else
            sudo /opt/local/bin/port upgrade pam-google-authenticator
    } >> "$LOG"
}

update_macos () {
    LOG="$LOGDIR/OSX"
    touch "$LOG"
    {
        echo ''
        echo '#################################'
        echo '#################################'
        date
        echo ''
        sudo softwareupdate -i --all --agree-to-license --force -R
    } >> "$LOG"
}

get_distro () {
    if [ -f /etc/os-release ]; then
        # freedesktop.org and systemd
        . /etc/os-release
        export OS=$ID
        elif type lsb_release >/dev/null 2>&1; then
        # linuxbase.org
        export OS=$(lsb_release -si | grep -Eo '^[^ ]+' | tr '[:upper:]' '[:lower:]')
        elif [ -f /etc/lsb-release ]; then
        # For some versions of Debian/Ubuntu without lsb_release command
        . /etc/lsb-release
        export OS=$(echo $DISTRIB_ID | grep -Eo '^[^ ]+' | tr '[:upper:]' '[:lower:]')
        elif [ -f /etc/debian_version ]; then
        # Older Debian/Ubuntu/etc.
        export OS=debian
        elif [ -f /etc/redhat-release ]; then
        # Older Red Hat, CentOS, etc.
        export OS=$(cat /etc/redhat-release | grep -Eo '^[^ ]+' | tr '[:upper:]' '[:lower:]')
    else
        # Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
        export OS=$(uname -s | grep -Eo '^[^ ]+' | tr '[:upper:]' '[:lower:]')
    fi
}

update_self () {
    LOG="$LOGDIR/update_script_self"
    touch "$LOG"
    {
        echo ''
        echo '#################################'
        echo '#################################'
        date
        echo ''
        echo "Updating update script.."
        sudo rm -fv "${LBIN}/update"
        curl https://raw.githubusercontent.com/datflowts/fcknlazyflow/master/ez-misc/update | tee "${LBIN}/update" >/dev/null
        chmod -v 555 "${LBIN}/update"
        echo "Done!"
    } >> "$LOG"
    exit 0
}

os_update () {
    local OS=$1
    case $OS in
        fedora|centos|rhel|rocky|oracle)
            update_self
            update_dnf
        ;;
        ubuntu|debian)
            update_self
            update_apt
        ;;
        manjaro|arch)
            update_self
            update_yay
            update_pacman
        ;;
        darwin)
            update_self
            update_brew
            update_ports
            update_macos
        ;;
        *)
            echo "$OS not supported. Exiting..."
            exit 1
        ;;
    esac
}

get_distro

case $@ in
    neofetch)
        update_neofetch
    ;;
    ga|google-authenticator|gauth|google-auth)
        if [[ "$OS" != "darwin" ]]; then
            echo "This is designed for MacOS only."
            echo "For Linux, please use your package manager."
            echo "Exiting..."
            exit 1
        fi
        update_ga
    ;;
    yay)
        if [[ "$OS" != "manjaro" ]] || [[ "$OS" != "arch" ]]; then
            echo "This only works on Manjaro or ArchLinux."
            exit 1
        fi
        update_yay
    ;;
    brew|homebrew)
        if [[ "$OS" != "darwin" ]]; then
            echo "This is designed for MacOS only."
            echo "For Linux, please use your package manager"
            echo "or visit https://brew.sh for informations"
            echo "about how to install and maintain brew for your OS."
            echo "Exiting..."
            exit 1
        fi
        update_brew
    ;;
    self|update)
        update_self
    ;;
    all)
        update_neofetch
        os_update "$OS"
    ;;
    *)
        os_update "$OS"
    ;;
esac
